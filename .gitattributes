import random
import time
import math

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def mod_inverse(a, m):
    gcd_val, x, _ = extended_gcd(a, m)
    if gcd_val != 1:
        raise ValueError("Inverse does not exist.")
    return x % m

def extended_gcd(a, b):
    if a == 0:
        return b, 0, 1
    gcd, x1, y1 = extended_gcd(b % a, a)
    x = y1 - (b // a) * x1
    y = x1
    return gcd, x, y

def generate_prime(bits):
    def is_probable_prime(n, k=10):
        if n < 2:
            return False
        if n in {2, 3}:
            return True
        if n % 2 == 0:
            return False

        s, d = 0, n - 1
        while d % 2 == 0:
            s += 1
            d //= 2

        for _ in range(k):
            a = random.randint(2, n - 2)
            x = pow(a, d, n)
            if x in {1, n - 1}:
                continue
            for _ in range(s - 1):
                x = pow(x, 2, n)
                if x == n - 1:
                    break
            else:
                return False
        return True

    while True:
        p = random.randint(2 ** (bits - 1), 2 ** bits - 1)
        if is_probable_prime(p):
            return p

def generate_keys(bits):
    p = generate_prime(bits // 2)
    q = generate_prime(bits // 2)
    n = p * q
    phi = (p - 1) * (q - 1)
    e = 65537  
    while gcd(e, phi) != 1:
        e = random.randint(2, phi - 1)

    d = mod_inverse(e, phi)
    return (n, e), (n, d)

def crack_private_key_brute_force(public_key):
    n, e = public_key
    start_time = time.perf_counter()

    
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            p = i
            q = n // i
            phi = (p - 1) * (q - 1)
            d = mod_inverse(e, phi)
            runtime = time.perf_counter() - start_time
            return (n, d), runtime

    return None, None

def main():
    print("\nBrute Force Approach Program")
    bits = int(input("Enter the number of bits for key generation (8 or 16): "))
    if bits not in [8, 16]:
        print("Invalid input! Please enter 8 or 16.")
        return
    
    public_key, private_key = generate_keys(bits)
    print(f"Public Key: {public_key}")
    print(f"Private Key: {private_key}")

    cracked_private_key, runtime = crack_private_key_brute_force(public_key)
    if cracked_private_key:
        print(f"\nCracked Private Key: {cracked_private_key}")
        print(f"Brute force runtime: {runtime:.6f} seconds")
    else:
        print("\nBrute force attack failed to crack the private key.")

if __name__ == "__main__":
    main()